package us.springett.threatmodeling;

import org.junit.Before;
import org.junit.Test;
import us.springett.threatmodeling.exception.ParseException;
import us.springett.threatmodeling.model.*;
import us.springett.threatmodeling.tools.mstmt2016.util.ParseUtil;

import java.io.File;
import java.util.List;
import java.util.Map;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsEqual.equalTo;

public class ImportMSTamModelTest {

    ThreatModel threatModel;

    @Before
    public void setup() throws ParseException {
        File file = new File("src/test/resources/mstam2016.tm7");
        threatModel = new ThreatModelFactory().parse(file, ThreatModelingTool.MICROSOFT_THREAT_MODELING_TOOL_2016);
    }

    @Test
    public void testAssignThreatsToAssets() {
        Map<String,Asset> assetIdMap = ParseUtil.mapAssetsByIds(threatModel.getAssets());
        Asset webAppAsset = assetIdMap.get("5a9a6139-22c2-4933-aecd-5f9ab30af5d5");
        Asset databaseAsset = assetIdMap.get("b10596d0-ef74-438a-8ec5-7a0ecabf3414");

        assertThat(threatModel.getAssets().size(), equalTo(3));

        //The first 10 threats belong to the web app
        List<Threat> firstTenThreats = threatModel.getThreats().subList(0,9);
        for (Threat threat : firstTenThreats) {
            assertThat(threat.getAssets().size(), equalTo(1));
            assertThat(threat.getAssets().get(0).getId(), equalTo(webAppAsset.getId()));
        }

        //Last 2 threats belong to the database
        List<Threat> lastTwoThreats = threatModel.getThreats().subList(10,11);
        for (Threat threat : lastTwoThreats) {
            assertThat(threat.getAssets().size(), equalTo(1));
            assertThat(threat.getAssets().get(0).getId(), equalTo(databaseAsset.getId()));
        }
    }

    @Test
    public void testParsingNotApplicableThreatState() {
        Threat threat = threatModel.getThreats().get(1);
        assertThat(threat.getState(), equalTo(ThreatState.NOT_APPLICABLE));
        assertThat(threat.isMitigated(), equalTo(true));
    }

    @Test
    public void testParsingAutoGeneratedThreatState() {
        Threat threat = threatModel.getThreats().get(3);
        assertThat(threat.getState(), equalTo(ThreatState.AUTO_GENERATED));
        assertThat(threat.isMitigated(), equalTo(false));
    }

    @Test
    public void testParsingMitigatedThreatState() {
        Threat threat = threatModel.getThreats().get(0);
        assertThat(threat.getState(), equalTo(ThreatState.MITIGATED));
        assertThat(threat.isMitigated(), equalTo(true));
    }

    @Test
    public void testParsingNeedsInvestigationThreatState() {
        Threat threat = threatModel.getThreats().get(10);
        assertThat(threat.getState(), equalTo(ThreatState.NEEDS_INVESTIGATION));
        assertThat(threat.isMitigated(), equalTo(false));
    }

    @Test
    public void testParsingDataflows() {
        List<DataFlow> dataFlows = threatModel.getDataFlows();
        assertThat(dataFlows.get(0).getId(), equalTo("dfabcdec-3d58-46eb-bcdb-c7c5b0e46201"));
        assertThat(dataFlows.get(0).getName(), equalTo("HTTPS"));

        assertThat(dataFlows.get(1).getId(), equalTo("1433bfa7-e3c0-40b5-b8a2-13f722a6a0db"));
        assertThat(dataFlows.get(1).getName(), equalTo("Internet Boundary"));

        assertThat(dataFlows.get(2).getId(), equalTo("cc9b0f2d-2389-4f51-8a55-ebbfc7e9f79d"));
        assertThat(dataFlows.get(2).getName(), equalTo("Binary"));
    }

    @Test
    public void testAssigningDataflowsToThreats() {
        for (Threat threat : threatModel.getThreats()) {
            System.out.println(threat.getDataFlow().getName());
        }
        assertThat(threatModel.getThreats().get(0).getDataFlow().getName(),equalTo("HTTPS"));
        assertThat(threatModel.getThreats().get(0).getDataFlow().getId(),equalTo("dfabcdec-3d58-46eb-bcdb-c7c5b0e46201"));

        assertThat(threatModel.getThreats().get(9).getDataFlow().getName(),equalTo("HTTPS"));
        assertThat(threatModel.getThreats().get(9).getDataFlow().getId(),equalTo("dfabcdec-3d58-46eb-bcdb-c7c5b0e46201"));

        assertThat(threatModel.getThreats().get(12).getDataFlow().getName(),equalTo("Binary"));
        assertThat(threatModel.getThreats().get(12).getDataFlow().getId(),equalTo("cc9b0f2d-2389-4f51-8a55-ebbfc7e9f79d"));
    }
}
